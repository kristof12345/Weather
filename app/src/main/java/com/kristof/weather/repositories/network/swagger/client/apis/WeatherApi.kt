/**
 * Weather Server
 * This is a weather data server. For each point on the globe, we provide historical, current and forecasted weather data via light-speed APIs.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CurrentWeather
import io.swagger.client.models.InlineResponse200
import io.swagger.client.models.InlineResponse2001

import io.swagger.client.infrastructure.*

class WeatherApi(basePath: kotlin.String = "https://api.openweathermap.org/data/2.5") : ApiClient(basePath) {

    /**
     * Get daily weather forecast
     * 
     * @param appid API token 
     * @param q City name, state code and country code divided by comma, use ISO 3166 country codes. 
     * @param units Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. 
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun forecastDailyGet(appid: kotlin.String, q: kotlin.String, units: kotlin.String): InlineResponse200 {
        val localVariableQuery: MultiValueMap = mapOf("appid" to listOf("$appid"), "q" to listOf("$q"), "units" to listOf("$units"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/forecast/daily", query = localVariableQuery
        )
        val response = request<InlineResponse200>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get hourly weather forecast
     * 
     * @param appid API token 
     * @param q City name, state code and country code divided by comma, use ISO 3166 country codes. 
     * @param units Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. 
     * @return InlineResponse2001
     */
    @Suppress("UNCHECKED_CAST")
    fun forecastHourlyGet(appid: kotlin.String, q: kotlin.String, units: kotlin.String): InlineResponse2001 {
        val localVariableQuery: MultiValueMap = mapOf("appid" to listOf("$appid"), "q" to listOf("$q"), "units" to listOf("$units"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/forecast/hourly", query = localVariableQuery
        )
        val response = request<InlineResponse2001>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2001
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get current weather
     * 
     * @param appid API token 
     * @param q City name, state code and country code divided by comma, use ISO 3166 country codes. 
     * @param units Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. 
     * @return CurrentWeather
     */
    @Suppress("UNCHECKED_CAST")
    fun weatherGet(appid: kotlin.String, q: kotlin.String, units: kotlin.String): CurrentWeather {
        val localVariableQuery: MultiValueMap = mapOf("appid" to listOf("$appid"), "q" to listOf("$q"), "units" to listOf("$units"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/weather", query = localVariableQuery
        )
        val response = request<CurrentWeather>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CurrentWeather
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
